import{_ as e,c as a,o as t,a3 as r}from"./chunks/framework.Dcugq_a2.js";const l="/assets/merkle-tree.IMAllNRw.png",m=JSON.parse('{"title":"BTC相关知识","description":"","frontmatter":{},"headers":[],"relativePath":"web3/btc/index.md","filePath":"web3/btc/index.md"}'),o={name:"web3/btc/index.md"},c=r('<h1 id="btc相关知识" tabindex="-1">BTC相关知识 <a class="header-anchor" href="#btc相关知识" aria-label="Permalink to &quot;BTC相关知识&quot;">​</a></h1><p>区块链：一个一个block区块组成的链表</p><h2 id="btc数据结构" tabindex="-1">BTC数据结构 <a class="header-anchor" href="#btc数据结构" aria-label="Permalink to &quot;BTC数据结构&quot;">​</a></h2><p>hash pointers 哈希指针</p><ul><li>保存hash结构体的地址以及该结构体的内容</li><li>指向下一个区块则使用的是哈希指针</li></ul><p>第一个区块则被称为创世区块 genesis block 最后一个区块则为最近创建的区块 most recent block</p><p>A &lt;- B &lt;- C</p><p>C 指向 B的哈希指针则是由B的结构体内容以及指向A的哈希指针生成。</p><h4 id="merkle-tree-binary-tree" tabindex="-1">Merkle tree &amp; Binary tree <a class="header-anchor" href="#merkle-tree-binary-tree" aria-label="Permalink to &quot;Merkle tree &amp; Binary tree&quot;">​</a></h4><ul><li>Merkle tree: 底层为数据块-data blocks，上层则为hash指针，两个data block的hash指针，再生成一个hash值，直至根节点。 任一data block发生改变，都会导致根节点hash值的变化 block由 block header和block body组成，block header保存有根节点的hash，交易信息则在body中存储</li></ul><p>Merkle proof：从交易的data block的hash指针节点一直到根节点的路径 <img src="'+l+'" alt="merkle tree"></p>',11),s=[c];function i(n,h,d,b,p,_){return t(),a("div",null,s)}const u=e(o,[["render",i]]);export{m as __pageData,u as default};
